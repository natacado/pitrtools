@ COPYRIGHT Command Prompt, Inc.

pitr_tools is a suite of utilities to make point in time easier. It uses a
push mechanism  for updating archives.

Options:
  -h, --help            show this help message and exit
  -A, --archive         Whether or not to archive
  -F FILE, --file=FILE  Archive file
  -C FILE, --config=FILE
                        the name of the archiver config file
  -f, --flush           Flush all remaining archives to slave

Dependencies:

 key based ssh auth between the master and slave (both ways)

To enable, one must edit the postgresql.conf.

archive_mode = on		# allows archiving to be done
archive_command = 'bin/archiver -A -C etc/archiver.ini -F %p'

-A tells the system to actually archive
-C takes the path to the config file
-F takes the path (or file) of the archive. 

-f/--flush is used at the command line only.

--flush:

You use flush before passing -F999 to cmd_standby. This is done
to make sure that all logs that master has written are available to
the standby before a failover.

Note that the use of --flush is a one way trip. Once used, you must
bring your slave into production or you will have to issue a new base
backup.

The archiver.ini file contains a variety of options. 

[DEFAULT]
; online or offline
state: online					

You can change the archiver to offline live, without touching postgresql.

; The base database directory

pgdata: /data1/pgsql/data

This is the PGDATA on the archiving machine.

; where to remotely copy archives
r_archivedir: /data2/pgsql/archive

The remote archive directory, e.g; the directory that will accept all
archive files to be restored by the standby server.

; where to locally copy archives (for file mode) 		
l_archivedir: /data2/pgsql/archive

The local archive directory. This is used when you want to archive all
files locally. For example, if you are using an NFS mount for the standby
server to get its files.

; the path to the version of scp you want to use		
scp_bin: /usr/bin/scp

Must point to the actual binary of scp.

; where is rsync				
rsync_bin: /usr/bin/rsync			

Must point to the actual binary of rsync. We use rsync over ssh, so don't
bother with an rsync server.

; can be scp | file | rsync
protocol: rsync

Rsync is absolutely preferred due to its error checking and guarantee of 
delivery.

; IP of slave					
slave: 192.168.3.1

This is the ip address of the standby server. A hostname/FQDN would work as well.

; the user that will be using scp				
user: postgres					

The unix shell user that is using scp. This is the user that must have ssh 
keys configured between the master and slave.

; if scp can't connect in 10 seconds error
timeout: 10

The SSH timeout. If it takes > timeout to begin the transfer the archiver will
provide a non zero return and alert per notify_critical.

; command to process in ok					
notify_ok: echo ok 				

Everything is o.k. so what do we do? This should be full path to a script.
For example, a nagios alert.

; command to process in warning
notify_warning:  echo WARNING

The same as OK but for warnings.

; command to process in critical
notify_critical: echo CRITICAL

The same as OK but for CRITICAL. This is total failure conditions.

; if you want to debug on/off only		 	
debug: off

This will provide you a lot of noisy info to wherever you push your
postgresql logging.



