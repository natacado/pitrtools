#!/usr/bin/env python2.5
#
#
# cmd_standby copyright command prompt inc
#
#
import popen2
import os
import shutil
import sys

# before we do anything, let's jsut check you we are

if os.geteuid()==0:
    sys.exit("\nBad Mojo... no root access for this script\n")

from ConfigParser import *
from sys import *
from optparse import OptionParser
from os import system

# Initiate command line switches

usage = "usage: %prog [options] arg1 arg2"
parser = OptionParser(usage=usage)

parser.add_option("-A", "--action", dest="pgctl_action", action="store", help="Start or Stop PostgreSQL", metavar="start|stop")
parser.add_option("-B", "--basebackup", dest="base_backup", action="store_true", help="Start/Stop a base backup", metavar="FILE")
parser.add_option("-C", "--config", dest="configfilename", action="store", help="the name of the archiver config file", metavar="FILE")
parser.add_option("-F", "--failover", dest="failover", action="store", help="If you are serious, set -F999", metavar="VALUE")
parser.add_option("-I", "--dbinit", dest="dbinit", action="store_true", help="Use before -B", metavar="FILE")
parser.add_option("-P", "--ping", dest="ping_check", action="store_true", help="Is my master alive?", metavar="FILE")
parser.add_option("-R", "--recovertotime", dest="recovertotime", action="store", help="If you need to restore to a specific point in time", metavar="TIMESTAMP")
parser.add_option("-S", "--standby", dest="standby", action="store_true", help="Enter standby mode", metavar="FILE")

(options, args) = parser.parse_args()

configfile = options.configfilename
base_backup = options.base_backup
standby = options.standby
dbinit = options.dbinit
pgctl_action = options.pgctl_action
ping_check = options.ping_check
failover = options.failover
recovertotime = options.recovertotime

# both -C and -f are required

if configfile == None:
   parser.error("option -C is required")
   print "\n"   

if recovertotime and not (failover == '999'):
   parser.error("option -R requires open -F999")
   print "\n"

# initiate config parser
config = ConfigParser()
config.read(configfile)

# Set up our keys
pgversion = config.defaults()['pgversion']
ssh = config.defaults()['ssh']
rsync = config.defaults()['rsync']
pgctl = config.defaults()['pg_ctl']
psql = config.defaults()['psql']
pg_standby = config.defaults()['pg_standby']
master_public_ip = config.defaults()['master_public_ip']
master_local_ip = config.defaults()['master_local_ip']
user = config.defaults()['user']
debug = config.defaults()['debug']
port = config.defaults()['port']
ssh_timeout = config.defaults()['ssh_timeout']
archivedir = config.defaults()['archivedir']
pgdata = config.defaults()['pgdata']
pgconf = config.defaults()['postgresql_conf']
hbaconf = config.defaults()['pg_hba_conf']
action_failover = config.defaults()['action_failover']
numarchives = config.defaults()['numarchives']

# Let's make sure executables can be reached

def check_config_func():
   pathvars = [ssh,rsync,pgctl,psql,pg_standby,archivedir,pgconf,hbaconf] 
   for element in pathvars:
      try:
         os.stat("%s" % (str(element)))
      except OSError, e:
         print "Config %s:  %s" % (str(element),str(e))
         exit(1)

def check_pgxlog_path_func():
   pg_xlog_dir = """%s/%s""" % (str(pgdata),str('pg_xlog'))
   pg_xlog_realpath = os.path.realpath(pg_xlog_dir) 
   if os.path.islink(pg_xlog_dir):
      try:
         os.stat(pg_xlog_realpath)
      except:
         try:
            os.makedirs(pg_xlog_realpath,0700)
         except OSError, e:
            print "Error: %s" % (str(e))
            print "HINT: You may have permission problems"
            print "Make sure that %s has the ability to create the directory %s" % ((str(user), (str(pg_xlog_realpath))))
            exit(1)
      finally:
         exit(0)
      
# Notifications

def notify_ok_func():
   if config.defaults()['notify_ok']:
      notify_ok = config.defaults()['notify_ok']
   else:
      notify_ok = None   

def notify_warning_func():
   if config.defaults()['notify_warning']:
      notify_warning = config.defaults()['notify_warning']
   else:
      notify_warning = None   

def notify_critical_func():
   if config.defaults()['notify_critical']:
      notify_critical = config.defaults()['notify_critical']
   else:
      notify_critical = None     

# Configure some basics

if debug == "on":
   ssh_flags = "-vvv -o ConnectTimeout=%s -o StrictHostKeyChecking=no" % (str(ssh_timeout))
   rsync_flags = "-avzl --delete --stats --exclude=backup_label"
   if pgversion == '8.2':
     pg_standby_flags = "-s5 -w0 -d -c %f %p"
   else:
     pg_standby_flags = "-s5 -w0 -d -c %f %p %r"
  
else:
   ssh_flags = "-o ConnectTimeout=%s -o StrictHostKeyChecking=no" % (str(ssh_timeout))
   rsync_flags = "-azl --delete --exclude=backup_label"
   if pgversion == '8.2':
     pg_standby_flags = "-s5 -w0 -c %f %p"
   else:
     pg_standby_flags = "-s5 -w0 -c %f %p %r"

ssh_connect = """%s %s %s@%s""" % (str(ssh), str(ssh_flags), str(user),str(master_public_ip))

# Yes the odd counted " is needed because of the way we have to quote within the command
psql_connect =  """ "%s -A -t -U%s -h%s -p%s -dpostgres """ % (str(psql), str(user), str(master_local_ip), str(port))
copy_dirs = "%s %s --exclude=pg_log/ --exclude=postgresql.conf --exclude=pg_hba.conf --exclude=postmaster.pid -e ssh %s@%s:" % (str(rsync), str(rsync_flags), str(user), str(master_public_ip))
ssh_psql = ssh_connect + psql_connect

# Recovery string
recovery_file = """%s/recovery.conf""" % (str(pgdata))

if failover == '999' and not recovertotime:
   recovery_string = """restore_command = 'cp %s/%%f "%%p"'""" % (str(archivedir))
elif failover == '999' and recovertotime:
   recovery_string = """restore_command = 'cp %s/%%f "%%p"'\nrecovery_target_time = '%s'""" % (str(archivedir),str(recovertotime)) 
else:
   recovery_string = """restore_command = '%s  %s %s' """ % (str(pg_standby), str(archivedir), str(pg_standby_flags))


def ping_check_func():
   query = """'SELECT 1'"""
   if debug == 'on':
      print "%s %s" % (str(ssh_psql),(str(query)))
   retval = system("%s -c %s\"" % (str(ssh_psql),str(query)))
   if retval:
      notify_critical_func()
      exit(1)
   else:
      print "Slave, I am your Master\n"
      exit(0)

def get_datadirs_func():
   if pgversion == '8.2' or '8.3':
      query = """'SELECT * FROM cmd_get_data_dirs()'"""
      paths = os.popen("%s -c %s\"" % (str(ssh_psql),str(query)))
      if debug == 'on':    
         print cmd + "\n"
   return paths.readlines()

def start_backup_func():
   query = """ 'SELECT cmd_pg_start_backup()' """
   retval = system("%s -c %s\"" % (str(ssh_psql),str(query)))   
   if retval:
      print "Unable to start base backup"
      notify_critical_func()
      exit(1)

def stop_backup_func():
   query = """ 'SELECT cmd_pg_stop_backup()' """
   retval = system("%s -c %s\"" % (str(ssh_psql),str(query)))
   if retval:
      print "Unable to stop base backup"
      notify_critical_func()
      exit(1)

def dbinit_func():
   paths = get_datadirs_func()
   for row in paths:
      if debug == 'on':
         print row
         print "foo"
      row = row.rstrip('\n')
      try:
         os.makedirs(row,0700)
      except OSError, e:
            print "Error: %s" % (str(e))
            print "HINT: You may have permission problems"
            print "Make sure that %s has the ability to create the directory: " % (str(user))
            print "%s" % ((str(row)))
            exit(1)

def base_backup_func():
   retval = os.system("rm -f %s/%s" % ((archivedir),str('*')))
   if retval:
      print "Unable to remove old archives"
      exit(1)
   query = """'SELECT * FROM cmd_get_data_dirs()'"""
   paths = get_datadirs_func()
   if debug == 'on':
      print paths
   for row in paths:
      row = row.rstrip('\n')
      retval = system("%s%s/ %s/" % (copy_dirs,row,row))
      if retval:
         print "Failed to get 0 exit status"
         exit(1)

def start_postgresql_func():
   retval = system("%s -D %s start" % (str(pgctl),str(pgdata)))
   if retval:
      print "Unable to start PostgreSQL"
      notify_warning_func()
      exit(1)

def stop_postgresql_func():
   retval = system("%s -D %s -m fast stop" % (str(pgctl),str(pgdata)))
   if retval:
      print "Unable to stop PostgreSQL"
      notify_critical_func()
      exit(1)

def write_recovery_func():
   try:
      file = open(recovery_file,'w')
      file.write('%s' % (str(recovery_string)))
      file.close()
   except Exception, e:
      print "Unable to write recovery file: %s" % (str(recovery_file))
      print "Exception: %s" % (str(e))
      notify_critical_func()
      exit(1)

def copy_confs_func():
   try:
      shutil.copy(pgconf,pgdata)
   except Exception, e:
      print "Unable to copy configuration files: %s" % (str(pgconf))
      print "Exception: %s" % (str(e))
      exit(1)
   try:
      shutil.copy(pgconf,pgdata)
   except Exception, e:
      print "Unable to copy configuration files: %s" % (str(pgconf))
      print "Exception: %s" % (str(e))
      exit(1)

def check_pgpid_func():
   pidfile = '%s/postmaster.pid' % (str(pgdata))
   try:
      check = os.stat(pidfile)
      if check:
         file = open(pidfile,'r')
         line = int(file.readline())
      sendsignal = os.kill(line,0)
      return 0
   except:
      return 1
  
def standby_func():
   write_recovery_func()
   start_postgresql_func()

def failover_action_func():
   if action_failover:
      retval = system("%s" % (str(action_failover)))
      if retval:
         notify_critical_func()     
         exit(1)
      else:
         exit(0)
 
# Before we do anything, let's check the config

check_config_func()

if dbinit:
   check = check_pgpid_func()
   if check == 0:
      print "ERROR: Can not take base backup with PG running locally"
      exit(1)
   else:
      dbinit_func()

if base_backup:
   check = check_pgpid_func()
   if check == 0:
      print "ERROR: Can not take base backup with PG running locally"
      exit(1)
   else:
      start_backup_func()
      base_backup_func()
      stop_backup_func()
      check_pg_xlog = check_pgxlog_path_func()
      if check_pg_xlog:
         exit(1)
         notify_critical_func()
      else:
         exit(0)

if failover == '999' and not recovertotime:
   check = check_pgpid_func()
   if check == 0:
      stop_postgresql_func()
   write_recovery_func()
   copy_confs_func()
   start_postgresql_func()
   failover_action_func()
   notify_ok_func()

if failover == '999' and recovertotime:
   check = check_pgpid_func()
   if check == 0:
      print "PostgreSQL is running. Bailing out"
      exit(1)
   write_recovery_func()
   copy_confs_func()
   start_postgresql_func()

if standby:
   check = check_pgpid_func()
   if check == 0:
      print "ERROR: Can not enter standby mode if PG is already running"
      exit(1)
   else:
      standby_func()

if ping_check:
   ping_check_func()   

if pgctl_action == 'start':
   start_postgresql_func()
elif pgctl_action == 'stop':
   stop_postgresql_func()
